= How to run AWS Lambda functions locally =

== Table Of Contents ==
	[[#Dependencies]]
	[[#Configuring AWS CLI (Optional)]]
	[[#Create a lambda function with SAM CLI]]
	[[#Run lamda function locally]]

=== Dependencies ===
	Install the following
	- {{https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html|AWS CLI}}
	- {{https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html|SAM CLI}}
	- {{https://docs.docker.com/get-docker/|Docker}}
	- {{https://pypi.org/project/boto3/|boto3(AWS SDK for python)(Optional)}}
		- To install `boto3` just run `pip install boto3`

=== Configuring AWS CLI (Optional) ===
	- You can skip this step if you don't want to deploy the lamda function in aws.
	- Run `aws configure` to configure AWS CLI
		- You'll need your _Acess Key ID_, _Secret Access Key_.
		- Next you'll need to enter your region name (ex: for _N. Virginia_ it is _us-east-1_)
			- You can find the region name in your _AWS Console_
		- Next for the output format you have 5 options
			- The are _json_, _yaml_, _yaml-stream_, _text_, _table_.
			- {{https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-output-format.html|Read More}}

=== Create a lambda function with SAM CLI ===
	Now let's create a lambda function using `sam`. To create a lamda function using `sam`
run `sam init`

	1. _*Output*_
	{{{
		You can preselect a particular runtime or package type when using the `sam init` experience.
		Call `sam init --help` to learn more.
	
		Which template source would you like to use?
			1 - AWS Quick Start Templates
			2 - Custom Template Location
		Choice:
	}}}
	
		If you have custom template then choose option _2_. But in our case we don't have
	one. So we will choose option _1_.
	
	2. _*Output*_
	{{{
		Choose an AWS Quick Start application template
			1 - Hello World Example
			2 - Multi-step workflow
			3 - Serverless API
			4 - Scheduled task
			5 - Standalone function
			6 - Data processing
			7 - Infrastructure event management
			8 - Machine Learning
		Template:
	}}}
		We will choose _1_, which is an Hello World Example.
	
	3. _*Output*_
	{{{
		Use the most popular runtime and package type? (Python and zip) [y/N]:
	}}}
		For this choose _y_.
	
	4. _*Output*_
	{{{
		Project name [sam-app]: 
	}}}
		You can enter give whatever name that you like.
	
	5. _*Output*_
		If everything goes well, you'll have the following output.
	{{{
		Cloning from https://github.com/aws/aws-sam-cli-app-templates (process may take a moment)
		
		    -----------------------
		    Generating application:
		    -----------------------
		    Name: HelloWorld
		    Runtime: python3.9
		    Architectures: x86_64
		    Dependency Manager: pip
		    Application Template: hello-world
		    Output Directory: .
		    
		    Next steps can be found in the README file at ./HelloWorld/README.md
		        
		
		    Commands you can use next
		    =========================
		    [*] Create pipeline: cd HelloWorld && sam pipeline init --bootstrap
		    [*] Test Function in the Cloud: sam sync --stack-name {stack-name} --watch
	}}}

=== Run lamda function locally ===
	Now to run the lambda function
		1. You have to build the funtcion first
			- To build run `sam build` inside your project directory.
			- You have _build_ the project _everytime_ you make a change.
		2. To run the function locally
			- Run `sam local invoke`
